Strings in Java 3
Assignment Answers 

1. Wap to remove duplicates from a string.
import java.util.*;

class GFG 
{
    static String removeDuplicate(char str[], int n)
    {
        // Used as index in the modified string
        int index = 0;

        // Traverse through all characters
        for (int i = 0; i < n; i++)
        {

            // Check if str[i] is present before it 
            int j;
            for (j = 0; j < i; j++) 
            {
                if (str[i] == str[j])
                {
                    break;
                }
            }

            // If not present, then add it to
            // result.
            if (j == i) 
            {
                str[index++] = str[i];
            }
        }
        return String.valueOf(Arrays.copyOf(str, index));
    }

    // Driver code
    public static void main(String[] args)
    {
        char str[] = "geeksforgeeks".toCharArray();
        int n = str.length;
        System.out.println(removeDuplicate(str, n));
    }
}


2. Wap to print duplicates characters from the string.
//Import packages   
import java.util.*;   
  
//Creating RemoveDuplicatesExample1 class  
class DuplicateChar    
{   
    //Creating removeDuplicates() method to remove duplicates from array  
    static void DuplicateChar(char str[], int length)   
    {   
        //Creating index variable to use it as index in the modified string   
        int index = 0;   
    
        // Traversing character array  
        for (int i = 0; i < length; i++)   
        {   
              
            // Check whether str[i] is present before or not   
            int j;   
            for (j = 0; j < i; j++)    
            {   
                if (str[i] == str[j])   
                {   
                    break;   
                }   
            }   
    
            // If the character is not present before, add it to resulting string   
            if (j == i)    
            {   
                str[index++] = str[i];   
            }   
        }   
        System.out.println(String.valueOf(Arrays.copyOf(str, index)));   
    }   
    
    // main() method starts  
    public static void main(String[] args)   
    {   
        String info = "My name is Shanu Shanu Kumaar";  
        //Converting string to character array  
        char str[] = info.toCharArray();  
        //Calculating length of the character array  
        int len = str.length;   
        //Calling removeDuplicates() method to remove duplicate characters  
        DuplicateChar(str, len);   
    }   
}  


3. Wap to check if “2552” is palindrome or not.
import java.util.Scanner;

public class palnidromePractice {
    public static void main(String[] args) {
        String str1 = new String();
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a string-");
        String str = sc.nextLine();
        sc.close();

        for (int i = str.length() - 1; i >= 0; i--) {
            str1 += str.charAt(i);
        }
        System.out.println("After reversing the string will be - " + str1);

        if (str.equals(str1)) {
            System.out.println(str + " is a palindrome!");
        } else {
            System.out.println(str + " is not a palindrome!");
        }
    }
} 


4. Wap to count the number of consonants, vowels, special characters in a string.
import java.util.Scanner;

public class CharacterCount {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();
        scanner.close();

        int vowels = 0;
        int consonants = 0;
        int specialChars = 0;

        // Convert the input string to lowercase for easier comparison
        input = input.toLowerCase();

        for (int i = 0; i < input.length(); i++) {
            char ch = input.charAt(i);
            if (ch >= 'a' && ch <= 'z') {
                // Check if the character is a vowel
                if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                    vowels++;
                } else {
                    consonants++;
                }
            } else if (ch >= '0' && ch <= '9') {
                // Skip digits
            } else {
                // Count other characters as special characters
                specialChars++;
            }
        }

        System.out.println("Number of vowels: " + vowels);
        System.out.println("Number of consonants: " + consonants);
        System.out.println("Number of special characters: " + specialChars);
    }
}


5. Wap to implement anagram checking least inbuilt methods being used.
public class anagram {
    public static void main(String[] args) {
        String str1 = "School Master";
        String str2 = "The Classroom";

        //first step
        str1 = str1.replace(" ", "");
        str2 = str2.replace(" ", "");

        //second step
        str1 = str1.toLowerCase();
        str2 = str2.toLowerCase();

        //third step
        char ar1[] = str1.toCharArray();
        char ar2[] = str2.toCharArray();

        //fourth step
        Arrays.sort(ar1);
        Arrays.sort(ar2);

        //fifth and final step
        if (Arrays.equals(ar1, ar2)) {
            System.out.println("It is an anagram");
        } else {
            System.out.println("It is not an anagram");
        }

    }
}

6. Wap to implement pangram checking with least inbuilt methods being used.

public class pangram {
    public static void main(String[] args) {
        String str = "The quick brown fox jumps over lazy dog";
        boolean flag = false;

        str = str.replace(" ", "");

        str = str.toUpperCase();

        char ch[] = str.toCharArray();

        int ar[] = new int[26];

        for (int i = 0; i < ch.length; i++) {
            ar[ch[i] - 65]++;
        }
        for (int i = 0; i < ar.length; i++) {
            if (ar[i] == 0) {
                System.out.println("It is not a pangram");
                flag = true;
            }
        }

        if (flag == false) {
            System.out.println("It is a pangram");
        }
    }
}




7. Wap to find if String contains all unique characters.
import java.util.Scanner;

public class UniqueCharacters {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();
        scanner.close();

        boolean isUnique = checkUniqueCharacters(input);

        if (isUnique) {
            System.out.println("The string contains all unique characters.");
        } else {
            System.out.println("The string does not contain all unique characters.");
        }
    }

    public static boolean checkUniqueCharacters(String str) {
        // Assuming ASCII character set, there are 256 possible characters
        boolean[] seen = new boolean[256];

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (seen[ch]) {
                return false; // If character has been seen before, return false
            }
            seen[ch] = true; // Mark the character as seen
        }

        return true; // If all characters are unique, return true
    }
}


8. Wap to find the maximum occurring character in a String.
import java.util.Scanner;

public class MaxOccurringCharacter {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();
        scanner.close();

        char maxOccurringChar = findMaxOccurringCharacter(input);

        System.out.println("Maximum occurring character: " + maxOccurringChar);
    }

    public static char findMaxOccurringCharacter(String str) {
        int[] charFrequency = new int[256]; // Assuming ASCII character set

        // Count the frequency of each character
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            charFrequency[ch]++;
        }

        // Find the character with maximum frequency
        char maxChar = '\0'; // Initialize with null character
        int maxFrequency = 0;
        for (int i = 0; i < charFrequency.length; i++) {
            if (charFrequency[i] > maxFrequency) {
                maxChar = (char) i;
                maxFrequency = charFrequency[i];
            }
        }

        return maxChar;
    }
}
